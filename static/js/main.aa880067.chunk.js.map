{"version":3,"sources":["noteColors.js","components/roll/NoteSettings.js","tones.js","constants.js","waves/waveFunctions.js","components/roll/Canvas.js","components/roll/DisplaySettings.js","Note.js","components/roll/Display.js","waves/generateTone.js","wav/WAVWriter.js","components/roll/Generator.js","audio/Oscillator.js","audio/AudioEngine.js","components/roll/Roll.js","App.js","index.js"],"names":["NoteSettings","notes","draw","deleteNotes","useState","tuningOffset","setTuningOffset","length","setLength","useEffect","getLength","className","value","onChange","e","target","Number","onClick","A4","toneArray","reverse","toneNames","SAMPLES","VOLUME","PX_TO_BEAT","PX_TO_TONE","sine","freq","t","Math","sin","PI","square","sign","sawtooth","floor","triangle","abs","colors","waveNames","Object","keys","waveFunctions","noteColors","i","TONES","HEIGHT","WIDTH","BEATS","CANVAS_HEIGHT","getBeatsNum","reduce","maxBeat","note","max","getBeatEnd","getScrollLength","min","getScrollRange","Canvas","setNotes","beatDivision","makeNewNote","canvas","useRef","selectedNotes","setSelectedNotes","ctrlDown","setCtrlDown","scrolling","setScrolling","scrollOffset","setScrollOffset","getBeatStart","scrollRange","scrollProportion","ctx","current","getContext","clearRect","drawGrid","drawNotes","drawToneNames","drawScrollbar","lineWidth","strokeStyle","drawGridHorizontal","drawGridVertical","y","beginPath","moveTo","lineTo","stroke","beatStart","lines","offset","beatDivisionWidth","x","beatEnd","inView","noteX","getOffset","noteY","getY","fillStyle","func","fillRect","width","height","includes","strokeRect","font","fillText","scrollLength","selectNote","getMouseCoords","rect","getBoundingClientRect","clientX","left","clientY","top","ref","tabIndex","coords","pxStart","inRect","snapX","snapY","newNote","onKeyDown","key","onKeyUp","onMouseDown","onMouseMove","newOffset","movementX","onMouseUp","newNotes","filter","DisplaySettings","setNewNoteLength","setBeatDivision","setTempo","setWaveFunction","noteLength","setNoteLength","beats","setBeats","bpm","setBpm","setFunc","val","map","Note","this","getX","Display","newNoteLength","waveFunction","generateTone","arr","push","numberToBytes","num","numberOfBytes","bytes","Array","fill","byte","stringToBytes","str","split","c","charCodeAt","pushBigEndian","content","pushLittleEndian","getWAV","waveData","size","pushHeaders","pushWaveData","byteArray","Uint8Array","blob","Blob","type","window","URL","createObjectURL","Generator","tempo","setWaveData","normalize","LENGTH","beat","SIZE","ceil","setTimeout","wave","getTone","normalizedArr","src","controls","Oscillator","output","osc","createOscillator","frequency","setValueAtTime","currentTime","connect","start","stop","AudioEngine","AudioContext","webkitAudioContext","volume","createGain","destination","gain","oscillators","interval","timePerPixel","sortedNotes","sort","a","b","lastNote","last","startTime","Date","setInterval","pixel","getType","forEach","clearInterval","Roll","engine","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa880067.chunk.js","sourcesContent":["import * as waveFunctions from './waves/waveFunctions.js';\r\n\r\nconst colors = ['#0c0', '#c00', '#cc0', '#00c'];\r\nconst waveNames = Object.keys(waveFunctions);\r\nconst noteColors = {};\r\n\r\nfor(let i = 0; i < colors.length; i++) {\r\n  noteColors[waveNames[i]] = colors[i];\r\n}\r\n\r\nexport default noteColors;","import React, { useState, useEffect } from 'react';\r\nimport './NoteSettings.css';\r\n\r\nfunction NoteSettings({ notes, draw, deleteNotes }) {\r\n  const [tuningOffset, setTuningOffset] = useState(0);\r\n  const [length, setLength] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setTuningOffset(notes[0].tuningOffset);\r\n    setLength(notes[0].getLength());\r\n  }, [notes])\r\n\r\n  const handleTuningOffset = (e) => {\r\n    const value = e.target.value;\r\n    setTuningOffset(value);\r\n    for(const note of notes) {\r\n      note.setTuningOffset(Number(value));\r\n    }\r\n    draw();\r\n  }\r\n\r\n  const handleLength = (e) => {\r\n    const value = e.target.value;\r\n    setLength(value);\r\n    for(const note of notes) {\r\n      note.setLength(Number(value));\r\n    }\r\n    draw();\r\n  }\r\n\r\n  return (\r\n    <div className=\"note-settings\">\r\n      Tuning offset <input value={tuningOffset} onChange={handleTuningOffset}></input> cents.<br />\r\n      Length <input value={length} onChange={handleLength}></input>beats.<br />\r\n      <button onClick={deleteNotes}>Delete</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NoteSettings;\r\n","export const A4 = 440;\r\nexport const AS4 = A4 * (2**(1/12));\r\nexport const B4 = A4 * (2**(2/12));\r\nexport const C5 = A4 * (2**(3/12));\r\nexport const CS5 = A4 * (2**(4/12));\r\nexport const D5 = A4 * (2**(5/12));\r\nexport const DS5 = A4 * (2**(6/12));\r\nexport const E5 = A4 * (2**(7/12));\r\nexport const F5 = A4 * (2**(8/12));\r\nexport const FS5 = A4 * (2**(9/12));\r\nexport const G5 = A4 * (2**(10/12));\r\nexport const GS5 = A4 * (2**(11/12));\r\n\r\nexport const toneArray = [A4, AS4, B4, C5, CS5, D5, DS5, E5, F5, FS5, G5, GS5].reverse();\r\nexport const toneNames = ['A4', 'A♯4', 'B4', 'C5', 'C♯5', 'D5', 'D♯5', 'E5', 'F5', 'F♯5', 'G5', 'G♯5'].reverse();","export const SAMPLES = 44100;\r\nexport const VOLUME = 25 * (32767/100);\r\n\r\nexport const PX_TO_BEAT = 20 * 4;\r\nexport const PX_TO_TONE = 20;","export const sine = (freq, t) => Math.sin(2 * Math.PI * freq * t);\r\n\r\nexport const square = (freq, t) => Math.sign(sine(freq, t));\r\n\r\nexport const sawtooth = (freq, t) => 2 * (t * freq - Math.floor(1/2 + t * freq));\r\n\r\nexport const triangle = (freq, t) => 2 * Math.abs(sawtooth(freq, t)) - 1;","import React, { useState, useRef, useEffect } from 'react';\r\nimport NoteSettings from './NoteSettings.js';\r\nimport { toneNames } from '../../tones.js';\r\nimport { PX_TO_BEAT, PX_TO_TONE } from '../../constants.js';\r\nimport noteColors from '../../noteColors.js';\r\nimport './Canvas.css';\r\n\r\nconst TONES = toneNames.length;\r\nconst BEATS = 5;\r\nconst HEIGHT = TONES * PX_TO_TONE;\r\nconst WIDTH = BEATS * PX_TO_BEAT;\r\nconst CANVAS_WIDTH = WIDTH;\r\nconst CANVAS_HEIGHT = HEIGHT + 16;\r\n\r\nconst getBeatsNum = (notes) => {\r\n  return notes.reduce((maxBeat, note) => Math.max(maxBeat, note.getBeatEnd()), 0);\r\n}\r\n\r\nconst getScrollLength = (notes) => {\r\n  return Math.min(WIDTH/((getBeatsNum(notes) + 2) * PX_TO_BEAT), 1) * WIDTH;\r\n}\r\n\r\nconst getScrollRange = (notes) => {\r\n  return WIDTH - getScrollLength(notes);\r\n}\r\n\r\nfunction Canvas({ notes, setNotes, beatDivision, makeNewNote }) {\r\n  const canvas = useRef(null);\r\n  const [selectedNotes, setSelectedNotes] = useState([]);\r\n  const [ctrlDown, setCtrlDown] = useState(false);\r\n  const [scrolling, setScrolling] = useState(false);\r\n  const [scrollOffset, setScrollOffset] = useState(0);\r\n\r\n  const getBeatStart = () => {\r\n    const scrollRange = getScrollRange(notes);\r\n    if(scrollRange === 0) {\r\n      return 0;\r\n    }\r\n    const scrollProportion = scrollOffset/scrollRange;\r\n    return (getBeatsNum(notes) - 3) * scrollProportion;\r\n  }\r\n\r\n  const draw = () => {\r\n    const ctx = canvas.current.getContext('2d');\r\n    ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n    drawGrid(ctx);\r\n    drawNotes(ctx);\r\n    drawToneNames(ctx);\r\n    drawScrollbar(ctx);\r\n  }\r\n\r\n  const drawGrid = (ctx) => {\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = '#666';\r\n    drawGridHorizontal(ctx);\r\n    drawGridVertical(ctx);\r\n  }\r\n\r\n  const drawGridHorizontal = (ctx) => {\r\n    for(let i = 1; i <= TONES; i++) {\r\n      const y = PX_TO_TONE * i + 0.5;\r\n      ctx.beginPath();\r\n      ctx.moveTo(0, y);\r\n      ctx.lineTo(WIDTH, y);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  const drawGridVertical = (ctx) => {\r\n    const beatStart = getBeatStart();\r\n    const lines = (BEATS + 1) * beatDivision;\r\n    for(let i = 1; i <= lines; i++) {\r\n      const offset = (beatStart % 1) * beatDivision;\r\n      const beatDivisionWidth = PX_TO_BEAT/beatDivision;\r\n      const x = Math.floor(beatDivisionWidth * (i - offset)) + 0.5;\r\n      ctx.lineWidth = (i % beatDivision === 0) ? 3 : 1;\r\n      ctx.beginPath();\r\n      ctx.moveTo(x, 0);\r\n      ctx.lineTo(x, HEIGHT);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  const drawNotes = (ctx) => {\r\n    const beatStart = getBeatStart();\r\n    const beatEnd = beatStart + BEATS;\r\n\r\n    for(const note of notes) {\r\n      if(note.inView(beatStart, beatEnd)) {\r\n        const noteX = (note.getOffset() - beatStart) * PX_TO_BEAT;\r\n        const noteY = note.getY();\r\n        ctx.fillStyle = noteColors[note.func];\r\n        ctx.fillRect(noteX + 2, noteY + 2, note.width - 3, note.height - 3);\r\n        ctx.strokeStyle = (selectedNotes.includes(note)) ? '#900' : '#666';\r\n        ctx.lineWidth = 2;\r\n        ctx.strokeRect(noteX + 2.5, noteY + 2.5, note.width - 4, note.height - 4);\r\n      }\r\n    }\r\n  }\r\n\r\n  const drawToneNames = (ctx) => {\r\n    ctx.font = '16px sans-serif';\r\n    ctx.fillStyle = '#000';\r\n    for(let i = 0; i < TONES; i++) {\r\n      ctx.fillText(toneNames[i], 0, PX_TO_TONE * (i + 1) - 4);\r\n    }\r\n  }\r\n\r\n  const drawScrollbar = (ctx) => {\r\n    const scrollLength = getScrollLength(notes);\r\n    ctx.fillStyle = '#999';\r\n    ctx.fillRect(scrollOffset, HEIGHT, scrollLength, 16);\r\n  }\r\n\r\n  const clickHandler = (e) => {\r\n    const coords = getMouseCoords(e);\r\n    if(coords.y >= HEIGHT) {\r\n      return;\r\n    }\r\n    const beatStart = getBeatStart();\r\n    const pxStart = beatStart * PX_TO_BEAT;\r\n    for(const note of notes) {\r\n      if(note.inRect(coords.x + pxStart, coords.y)) {\r\n        selectNote(note);\r\n        draw();\r\n        return;\r\n      }\r\n    }\r\n    const beatDivisionWidth = PX_TO_BEAT/beatDivision;\r\n    const snapX = Math.floor((coords.x + pxStart)/beatDivisionWidth) * beatDivisionWidth;\r\n    const snapY = Math.floor(coords.y/PX_TO_TONE) * PX_TO_TONE;\r\n    const scrollProportion = scrollOffset/getScrollLength(notes);\r\n    \r\n    const newNote = makeNewNote(snapX, snapY);\r\n    setSelectedNotes([]);\r\n    setScrollOffset(scrollProportion * getScrollLength([...notes, newNote]));\r\n    draw();\r\n  }\r\n\r\n  const selectNote = (note) => {\r\n    if(ctrlDown) {\r\n      setSelectedNotes([...selectedNotes, note]);\r\n    }\r\n    else {\r\n      setSelectedNotes([note]);\r\n    }\r\n  }\r\n\r\n  const mouseDownHandler = (e) => {\r\n    const coords = getMouseCoords(e);\r\n    if(coords.y >= HEIGHT) {\r\n      setScrolling(true);\r\n    }\r\n  }\r\n\r\n  const mouseMoveHandler = (e) => {\r\n    if(scrolling) {\r\n      let newOffset = scrollOffset + e.movementX;\r\n      newOffset = Math.max(newOffset, 0);\r\n      newOffset = Math.min(newOffset, getScrollRange(notes));\r\n      setScrollOffset(newOffset);\r\n    }\r\n  }\r\n\r\n  const mouseUpHandler = (e) => {\r\n    setScrolling(false);\r\n  }\r\n\r\n  const getMouseCoords = (e) => {\r\n    const rect = e.target.getBoundingClientRect();\r\n    const mouseX = e.clientX - rect.left;\r\n    const mouseY = e.clientY - rect.top;\r\n    return {\r\n      x: mouseX,\r\n      y: mouseY,\r\n    };\r\n  }\r\n\r\n  const keyDownHandler = (e) => {\r\n    if(e.key === \"Control\") {\r\n      setCtrlDown(true);\r\n    }\r\n  }\r\n\r\n  const keyUpHandler = (e) => {\r\n    if(e.key === \"Control\") {\r\n      setCtrlDown(false);\r\n    }\r\n  }\r\n\r\n  const deleteNotes = () => {\r\n    const newNotes = notes.filter(note => !selectedNotes.includes(note))\r\n    setNotes([...newNotes]);\r\n    setSelectedNotes([]);\r\n    setScrollOffset(Math.min(scrollOffset, getScrollRange(newNotes)));\r\n  }\r\n\r\n  const clear = () => {\r\n    setNotes([]);\r\n    setSelectedNotes([]);\r\n    setScrollOffset(0);\r\n    draw();\r\n  }\r\n\r\n  useEffect(() => draw());\r\n\r\n  return (\r\n    <div className=\"canvas\">\r\n      <div className=\"canvas-wrapper\">\r\n        <canvas ref={canvas} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} tabIndex=\"0\"\r\n          onClick={clickHandler} onKeyDown={keyDownHandler} onKeyUp={keyUpHandler}\r\n          onMouseDown={mouseDownHandler} onMouseMove={mouseMoveHandler} onMouseUp={mouseUpHandler}>\r\n        </canvas>\r\n        <button onClick={clear}>Clear</button>\r\n      </div>\r\n      {(selectedNotes.length > 0) && <NoteSettings notes={selectedNotes} draw={draw} deleteNotes={deleteNotes}></NoteSettings>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Canvas\r\n","import React, { useState } from 'react';\r\nimport * as waveFunctions from '../../waves/waveFunctions.js';\r\nimport './DisplaySettings.css';\r\n\r\nfunction DisplaySettings({ setNewNoteLength, setBeatDivision, setTempo, setWaveFunction }) {\r\n  const [noteLength, setNoteLength] = useState(1);\r\n  const [beats, setBeats] = useState(4);\r\n  const [bpm, setBpm] = useState(60);\r\n  const [func, setFunc] = useState('sine');\r\n\r\n  const noteLengthHandler = (e) => {\r\n    const val = e.target.value;\r\n    setNoteLength(val);\r\n    setNewNoteLength(val);\r\n  }\r\n\r\n  const beatsHandler = (e) => {\r\n    const val = e.target.value;\r\n    setBeats(val);\r\n    setBeatDivision(val);\r\n  }\r\n\r\n  const bpmHandler = (e) => {\r\n    const val = e.target.value;\r\n    setBpm(val);\r\n    setTempo(val);\r\n  }\r\n\r\n  const waveHandler = (e) => {\r\n    const val = e.target.value;\r\n    setFunc(val);\r\n    setWaveFunction(val);\r\n  }\r\n\r\n  return (\r\n    <div className=\"display-settings\">\r\n      New note length <input value={noteLength} onChange={noteLengthHandler}></input>beats.<br />\r\n      Beat division <input value={beats} onChange={beatsHandler}></input>.<br />\r\n      Tempo <input value={bpm} onChange={bpmHandler}></input>bpm.<br />\r\n      Wave <select value={func} onChange={waveHandler}>\r\n        {Object.keys(waveFunctions).map(x => <option value={x} key={x}>{x}</option>)}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DisplaySettings;\r\n","import { PX_TO_BEAT, PX_TO_TONE } from './constants.js';\r\nimport { toneArray } from './tones.js';\r\n\r\nclass Note {\r\n  constructor(x, y, length, func) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = PX_TO_BEAT * length;\r\n    this.height = PX_TO_TONE;\r\n    this.tuningOffset = 0;\r\n    this.length = length;\r\n    this.func = func;\r\n  }\r\n\r\n  getX() {\r\n    return this.x;\r\n  }\r\n\r\n  getY() {\r\n    return this.y - (this.tuningOffset/100 * PX_TO_TONE);\r\n  }\r\n\r\n  getOffset() {\r\n    return this.x / PX_TO_BEAT;\r\n  }\r\n\r\n  getTone() {\r\n    return toneArray[this.y / PX_TO_TONE] * (2**(this.tuningOffset/1200));\r\n  }\r\n\r\n  getLength() {\r\n    return this.length;\r\n  }\r\n\r\n  getBeatEnd() {\r\n    return this.getOffset() + this.getLength();\r\n  }\r\n\r\n  getType() {\r\n    return this.func;\r\n  }\r\n\r\n  setLength(length) {\r\n    this.length = length;\r\n    this.width = PX_TO_BEAT * length;\r\n  }\r\n\r\n  setTuningOffset(offset) {\r\n    this.tuningOffset = offset;\r\n  }\r\n\r\n  inRect(x, y) {\r\n    return (x >= this.getX()) && (x <= this.getX() + this.width) && (y >= this.getY()) && (y <= this.getY() + this.height);\r\n  }\r\n\r\n  inView(beatStart, beatEnd) {\r\n    return (this.getOffset() < beatEnd) || (this.getBeatEnd() > beatStart);\r\n  }\r\n}\r\n\r\nexport default Note;","import React, { useState } from 'react';\r\nimport './Display.css';\r\nimport Canvas from './Canvas.js';\r\nimport DisplaySettings from './DisplaySettings.js';\r\nimport Note from '../../Note.js';\r\n\r\nfunction Display({ notes, setNotes, setTempo }) {\r\n  const [newNoteLength, setNewNoteLength] = useState(1);\r\n  const [beatDivision, setBeatDivision] = useState(4);\r\n  const [waveFunction, setWaveFunction] = useState('sine');\r\n  \r\n  const makeNewNote = (x, y) => {\r\n    const newNote = new Note(x, y, Number(newNoteLength), waveFunction);\r\n    const newNotes = [...notes, newNote];\r\n    setNotes([...newNotes]);\r\n    return newNote;\r\n  }\r\n\r\n  const newNoteLengthHandler = (val) => {\r\n    setNewNoteLength(val);\r\n  }\r\n\r\n  const beatDivisionHandler = (val) => {\r\n    setBeatDivision(val);\r\n  }\r\n\r\n  const tempoHandler = (val) => {\r\n    setTempo(val);\r\n  }\r\n\r\n  const waveFunctionHandler = (val) => {\r\n    setWaveFunction(val);\r\n  }\r\n\r\n  return (\r\n    <div className=\"display\">\r\n      <DisplaySettings setNewNoteLength={newNoteLengthHandler} setBeatDivision={beatDivisionHandler}\r\n                       setTempo={tempoHandler} setWaveFunction={waveFunctionHandler}></DisplaySettings>\r\n      <Canvas notes={notes} setNotes={setNotes} beatDivision={beatDivision} makeNewNote={makeNewNote}></Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import { SAMPLES, VOLUME } from '../constants.js';\r\n\r\nfunction generateTone(freq, length, func) {\r\n  const arr = []\r\n  for(let i = 0; i < SAMPLES * length; i++) {\r\n      const val = Math.floor(func(freq, i/SAMPLES) * VOLUME);\r\n      arr.push(val, val);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport default generateTone;","import { SAMPLES } from '../constants.js';\r\n\r\nfunction numberToBytes(num, numberOfBytes) {\r\n  const bytes = new Array(numberOfBytes).fill(0);\r\n  for(let i = 0; i < numberOfBytes; i++) {\r\n      const byte = (num >> (8*i)) & 0xFF;\r\n      bytes[i] = byte;\r\n  }\r\n  bytes.reverse();\r\n  return bytes;\r\n}\r\n\r\nfunction stringToBytes(str) {\r\n  return str.split('').map(c => c.charCodeAt(0));\r\n}\r\n\r\nfunction pushBigEndian(arr, content) {\r\n  for(const val of content) {\r\n      arr.push(val);\r\n  }\r\n}\r\n\r\nfunction pushLittleEndian(arr, content) {\r\n  for(let i = content.length - 1; i >= 0; i--) {\r\n      arr.push(content[i]);\r\n  }\r\n}\r\n\r\nfunction pushWaveData(arr, waveData) {\r\n  for(const val of waveData) {\r\n      pushLittleEndian(arr, numberToBytes(val, 2));\r\n  }\r\n}\r\n\r\nfunction pushHeaders(arr, size) {\r\n  pushBigEndian(arr, stringToBytes(\"RIFF\"));\r\n  pushLittleEndian(arr, numberToBytes(36 + size, 4));\r\n  pushBigEndian(arr, stringToBytes(\"WAVE\"));\r\n  pushBigEndian(arr, stringToBytes(\"fmt \"));\r\n  pushLittleEndian(arr, numberToBytes(16, 4));\r\n  pushLittleEndian(arr, numberToBytes(1, 2));\r\n  pushLittleEndian(arr, numberToBytes(2, 2));\r\n  pushLittleEndian(arr, numberToBytes(SAMPLES, 4));\r\n  pushLittleEndian(arr, numberToBytes(SAMPLES * 4, 4));\r\n  pushLittleEndian(arr, numberToBytes(4, 2));\r\n  pushLittleEndian(arr, numberToBytes(16, 2));\r\n  pushBigEndian(arr, stringToBytes(\"data\"));\r\n  pushLittleEndian(arr, numberToBytes(size, 4));\r\n}\r\n\r\nfunction getWAV(waveData, size) {\r\n  const arr = [];\r\n\r\n  pushHeaders(arr, size);\r\n  pushWaveData(arr, waveData);\r\n    \r\n  const byteArray = new Uint8Array(arr);\r\n  const blob = new Blob([byteArray], { type: 'application/octet-stream' });\r\n\r\n  return window.URL.createObjectURL(blob);\r\n}\r\n\r\nexport default getWAV;","import React, { useState } from 'react';\r\nimport './Generator.css';\r\nimport generateTone from '../../waves/generateTone.js';\r\nimport * as waveFunctions from '../../waves/waveFunctions.js';\r\nimport getWAV from '../../wav/WAVWriter.js';\r\nimport { SAMPLES, VOLUME } from '../../constants.js';\r\n\r\nfunction Generator({ notes, tempo }) {\r\n  let [waveData, setWaveData] = useState(null);\r\n\r\n  const getBeatsNum = () => {\r\n    const lastBeat = notes.reduce((beat, note) => Math.max(beat, note.getBeatEnd()), 0);\r\n    return lastBeat;\r\n  }\r\n\r\n  const clickHandler = () => {\r\n    const LENGTH = getBeatsNum() / (tempo/60);\r\n    const SIZE = Math.ceil(SAMPLES * 4 * LENGTH);\r\n    setWaveData(0);\r\n    setTimeout(() => {\r\n      const arr = new Array(SIZE).fill(0);\r\n      for(const note of notes) {\r\n        const offset = note.getOffset() / (tempo/60);\r\n        const wave = generateTone(note.getTone(), note.getLength() / (tempo/60), waveFunctions[note.func]);\r\n        for(let i = 0; i < wave.length; i++) {\r\n          const arrIndex = Math.floor(SAMPLES * 2 * offset) + i;\r\n          arr[arrIndex] += wave[i];\r\n        }\r\n      }\r\n      const normalizedArr = normalize(arr);\r\n      setWaveData(getWAV(normalizedArr, SIZE));\r\n    }, 0);\r\n  }\r\n\r\n  const normalize = (arr) => {\r\n    const max = arr.reduce((max, x) => Math.max(max, x), 0);\r\n    if(max > VOLUME) {\r\n      return arr.map(x => Math.floor(x * (VOLUME/max)));\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  const getAudio = () => {\r\n    if(waveData) {\r\n      return <audio src={waveData} controls></audio>;\r\n    }\r\n    if(waveData === 0) {\r\n      return <div>Generating...</div>\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"generator\">\r\n      <button onClick={clickHandler}>Generate!</button>\r\n      {getAudio()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Generator;\r\n","class Oscillator {\r\n  constructor(type, freq, length, ctx, output) {\r\n    this.osc = ctx.createOscillator();\r\n\r\n    this.osc.type = type;\r\n    this.osc.frequency.setValueAtTime(freq, ctx.currentTime);\r\n    this.osc.connect(output);\r\n    this.osc.start();\r\n    this.osc.stop(ctx.currentTime + length / 1000);\r\n  }\r\n\r\n  stop() {\r\n    this.osc.stop();\r\n  }\r\n}\r\n\r\nexport default Oscillator;","import Oscillator from './Oscillator.js';\r\nimport { PX_TO_BEAT } from '../constants.js';\r\n\r\nclass AudioEngine {\r\n  constructor() {\r\n    this.ctx = new (window.AudioContext || window.webkitAudioContext)();\r\n    this.volume = this.ctx.createGain();\r\n    this.volume.connect(this.ctx.destination);\r\n    this.volume.gain.setValueAtTime(0.25, this.ctx.currentTime);\r\n\r\n    this.oscillators = [];\r\n    this.interval = null;\r\n  }\r\n\r\n  start(notes, tempo) {\r\n    this.stop();\r\n    const timePerPixel = (60 * 1000)/(tempo * PX_TO_BEAT);\r\n    const sortedNotes = [...notes].sort((a,b) => a.getOffset() - b.getOffset());\r\n    let current = 0;\r\n    const lastNote = sortedNotes.reduce((last, note) => Math.max(last, note.getBeatEnd()), 0) * PX_TO_BEAT;\r\n    const startTime = new Date();\r\n    \r\n    this.interval = setInterval(() => {\r\n      const timeElapsed = new Date() - startTime;\r\n      const pixel = timeElapsed/timePerPixel;\r\n      while(current < sortedNotes.length && sortedNotes[current].getX() <= pixel) {\r\n        const note = sortedNotes[current];\r\n        const length = note.getLength() * PX_TO_BEAT * timePerPixel;\r\n        this.oscillators.push(new Oscillator(note.getType(), note.getTone(), length, this.ctx, this.volume));\r\n        current++;\r\n      }\r\n      if(pixel >= lastNote) {\r\n        this.stop();\r\n      }\r\n    }, timePerPixel);\r\n  }\r\n\r\n  stop() {\r\n    this.oscillators.forEach(osc => osc.stop());\r\n    this.oscillators = [];\r\n    clearInterval(this.interval);\r\n  }\r\n}\r\n\r\nexport default AudioEngine;","import React, { useState } from 'react';\r\nimport Display from './Display.js';\r\nimport Generator from './Generator.js';\r\nimport AudioEngine from '../../audio/AudioEngine.js';\r\n\r\nfunction Roll() {\r\n  const [notes, setNotes] = useState([]);\r\n  const [tempo, setTempo] = useState(60);\r\n  const engine = new AudioEngine();\r\n\r\n  const play = () => {\r\n    engine.start(notes, tempo);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Display notes={notes} setNotes={setNotes} tempo={tempo} setTempo={setTempo}></Display>\r\n      <Generator notes={notes} tempo={tempo}></Generator>\r\n      <button onClick={play}>Play</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Roll;\r\n","import Roll from './components/roll/Roll.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Roll></Roll>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}